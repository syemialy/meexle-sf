<apex:page controller="ObjectDetailsController" docType="html-5.0" showHeader="false" applyBodyTag="false" applyHtmlTag="false" standardStylesheets="false">
    <html ng-app="objDescApp">
    <head>
        <title>Object Description</title>
        <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css" />
        <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css" />
        <link rel="stylesheet" href="{!URLFOR($Resource.MeexleStyle)}" />
        <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
        <script src="//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/js/bootstrap.min.js"></script>
        <script src="//cdnjs.cloudflare.com/ajax/libs/angular.js/1.3.10/angular.min.js"></script>
        <script src="//cdnjs.cloudflare.com/ajax/libs/angular-ui-router/0.2.13/angular-ui-router.min.js"></script>
        <script src="//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.12.0/ui-bootstrap-tpls.min.js"></script>
        <script src="//cdnjs.cloudflare.com/ajax/libs/jsforce/1.3.1/jsforce.min.js"></script>
        <script>
            var conn = new jsforce.Connection({accessToken: '{!$API.Session_Id}'});

            angular.module('objDescApp', ['ui.router', 'ui.bootstrap']);

            angular.module('objDescApp').config(['$stateProvider', '$urlRouterProvider', '$httpProvider', function ($stateProvider, $urlRouterProvider, $httpProvider) {
                'use strict';
                $urlRouterProvider.otherwise('/');
               

                $stateProvider
                .state('main', {
                   url: '/',
                   views: {
                        "body": {
                            template: '<h2>Select an object for more information</h2>'
                        }
                   }
                })
                .state('object', {
                   url: '/{name}',
                   views: {
                        "body": {
                            controller: 'ObjectDetailCtrl',
                            templateUrl: '{!URLFOR($Resource.ObjectDetailView)}'
                        }
                   }
                });
            }]);


/* ************************ObjectDetailCtrl ***********/
            angular.module('objDescApp').controller('ObjectDetailCtrl', ['$scope', '$stateParams', 'ConfigService',  function ($scope, $stateParams, ConfigService) {
                'use strict';

                $scope.loading_main = true;
                $scope.isDescriptionCollapsed = true;
                $scope.isFieldsCollapsed = false;
                $scope.isChildrenCollapsed = false;

                $scope.property_list = [
                    [
                        'activateable',
                        'createable',
                        'custom',
                        'customSetting',
                        'deletable',
                        'deprecatedAndHidden'
                    ], [
                        'feedEnabled',
                        'layoutable',
                        'mergeable',
                        'queryable',
                        'replicateable',
                        'searchLayoutable'
                    ], [
                        'searchable',
                        'triggerable',
                        'undeletable',
                        'updateable'
                    ]
                ];

                conn.describe($stateParams.name, function (error_describe, metadata) {
                    var configPromise = ConfigService.getConfig();
                    configPromise.then(function() {

                        $scope.current_object = metadata;
                        $scope.current_object = ConfigService.fillObjectFields(metadata);
                        $scope.isObjecInSync = ConfigService.isObjecInSync($stateParams.name); //check if object exists in sync config
                        $scope.fieldsPredicate = '';
                        $scope.relationshipsPredicate = '';
                        $scope.labelStyle = 'fa-sort';
                        $scope.nameStyle = 'fa-sort';
                        $scope.typeStyle = 'fa-sort';
                        $scope.descStyle = 'fa-sort';
                        $scope.childSObjectStyle = 'fa-sort';
                        $scope.rnameStyle = 'fa-sort';
                        $scope.fieldStyle = 'fa-sort';
                        $scope.loading_main = false;
                        /**
                        * Function to filter only supported type fields
                        */
                        $scope.filterSupportedFieldsFn = function ( field )
                        {
                            var notSupportedTypes = ['date', 'datetime', 'address'];
                            if ( notSupportedTypes.indexOf(field.type) > -1 ) return false;
                            if ( field.type.indexOf('textarea') > -1 ) return false;
                            
                            return true;
                        }

                       
                    });
                });

                $scope.fieldSyncChanged = function(object) {
                    ConfigService.fieldSyncChanged(object, $stateParams.name); 
                }
            }]);

/* ************************ObjectListCtrl ***********/

            angular.module('objDescApp').controller('ObjectListCtrl', function ($scope, $state, ConfigService) {
                'use strict';
                $scope.loading_sidebar = true;
                
                conn.describeGlobal(function (error_describe, metadata) {
                    var configPromise = ConfigService.getConfig();
                    configPromise.then(function() {
                        $scope.objects =  ConfigService.fillObjectsMetaDataWithSyncFields(metadata);
                        $scope.loading_sidebar = false;
                    });
                });

                $scope.objectSyncChanged = function(object) {
                    ConfigService.objectSyncChanged(object);
                    $state.go($state.current.name, {}, {reload: true});//refresh fields template
                }

                $scope.saveConfig = function(){
                    $scope.loading_main = true;
                    ConfigService.saveConfig(function(err){
                        if(err) {
                            $scope.saveError = true;
                            $scope.syncSaved = false;
                        }else{
                            $scope.saveError = false;
                            $scope.syncSaved = true;
                            $scope.loading_main = false;
                        } 
                        
                    });
                }

                /**
                * function to filter only supported Objects
                */
                $scope.filterSupportedRecordsFn = function ( object )
                {
                    var allowedObjects = ["Account", "Case", "Contact", "Lead", "Product"];
                    if ( allowedObjects.indexOf(object.name) > -1 ) 
                        return true;
                    
                    return false;
                }
 
            });


/* ************************ConfigService ***********/

            angular.module('objDescApp').factory('ConfigService', function ($http, $rootScope) {
                var jsonConf;     
                var confTemplate = {"mappings": [], "connection":{"exported_at":"2016-01-27T13:22:16.003137+00:00","app_name":"connecttosfme","organization_id":"{!orgId}"},"version":1};
                var endPointUrl = 'https://meexle-trigodda.rhcloud.com/uat/settings?tenantid={!orgId}';           
                
                function  addObjectToConfig(objectName){
                   if(checkIfObjectExistsAtConfig(objectName)) return;
                    conn.describe(objectName, function (error_describe, metadata) {
                        var fields = metadata.fields;
                        var tmpFields = {} ;
                        for (var i=0;  i < fields.length; i++) {
                            tmpFields[fields[i].name] = {};  
                        }
                        jsonConf.mappings.push({
                        "object_name": objectName,
                        "config" : {
                            "fields" : tmpFields
                        }

                    });
                   

                })

                };
                function checkIfObjectExistsAtConfig(objectName){
                    for (var i=0;  i < jsonConf.mappings.length; i++) {
                        if(jsonConf.mappings[i].object_name == objectName){//return if object already exists
                            return true;
                        }
                    }
                    return false;
                
                };

                function removeObjectFromConfig (objectName){
                     for (var i=0;  i < jsonConf.mappings.length; i++) {
                        if(jsonConf.mappings[i].object_name == objectName){
                            jsonConf.mappings.splice(i, 1);
                            i = jsonConf.mappings.length; // break loop
                        }
                    }
                };
                function addFieldToConfig(fieldName, objectName){
                    if(checkIfObjectExistsAtConfig(objectName)){
                        for (var i=0;  i < jsonConf.mappings.length; i++) {
                            if(jsonConf.mappings[i].object_name == objectName){
                                jsonConf.mappings[i].config.fields[fieldName] = {};
                                i = jsonConf.mappings.length; //break loop
                            }
                        }
                    }else{

                    }
                };
                function removeFieldFromConfig(fieldName, objectName){
                    for (var i=0;  i < jsonConf.mappings.length; i++) {
                        if(jsonConf.mappings[i].object_name == objectName){
                            delete jsonConf.mappings[i].config.fields[fieldName];
                            i = jsonConf.mappings.length;
                        }
                    }
                };

                var jsonConfPromise = $http({
                                              method: 'GET',
                                              url: endPointUrl,
                                              transformResponse: undefined
                                            }).then(
                                                function successCallback(response) {
                                                    jsonConf = JSON.parse(response.data);
                                                    $rootScope.getConfigError = false;
                                                    //return for chaining
                                                    return jsonConf;
                                                },
                                                function errorCallback(response) {
                                                    if(response.status == "404"){
                                                        jsonConf = confTemplate;
                                                    }else{
                                                        console.log("Get config error");
                                                        jsonConf = confTemplate;
                                                        $rootScope.getConfigError = true;
                                                    }
                                                    //return for chaining
                                                    return jsonConf;
                                                }
                                            );
                function getConfig() {
                       //save httpPromise           
                      
                       //return promise
                       return jsonConfPromise;  
                   };

                return {
                    jsonConf: jsonConf,
                    getConfig: getConfig,
                    saveConfig: function(callback){
                        var req = {
                            method: 'POST',
                            url: endPointUrl,
                            transformResponse: undefined,
                            headers: {
                                'Content-Type': 'application/json' 
                            },
                            data: JSON.stringify(jsonConf)
                        }
                        $http(req).then(function(resp){
                            callback(null)
                        }, function(resp){
                            console.log("save config error  org_id={!orgId} " + resp.status);
                            callback(resp);
                        });
                    },
                    objectSyncChanged: function(object){
                        if(object.sync){
                            addObjectToConfig(object.name);
                        }else{
                            removeObjectFromConfig(object.name);
                        }
                    },
                    fieldSyncChanged: function(field, objectName){
                        if(field.sync){
                            addFieldToConfig(field.name, objectName);
                        }else{
                            removeFieldFromConfig(field.name, objectName);
                        }

                    },
                    fillObjectFields: function(metadata){
                        // jsonConfPromise.then(function (jsonConf) {
                            if(checkIfObjectExistsAtConfig(metadata.name)){
                                 for (var i=0;  i < jsonConf.mappings.length; i++) {
                                    var currObj = jsonConf.mappings[i];
                                    if(currObj.object_name == metadata.name){ // iterates over fields from config
                                        var fields = currObj.config.fields;
                                        
                                         for (var field in fields) { // iterate over fields from json config
                                            for (var j=0;  j < metadata.fields.length; j++) {
                                                if(metadata.fields[j].name ==  field){
                                                    metadata.fields[j].sync = true;
                                                }
                                            }
                                        }
                                    }
                                 }
                            }
                            return metadata;
                    // });
                       
                    },
                    fillObjectsMetaDataWithSyncFields: function(metadata){
                        for (var i=0;  i < jsonConf.mappings.length; i++) {
                            var objName = jsonConf.mappings[i].object_name;
                            
                            for(var j=0; j < metadata.sobjects.length; j++){

                                if(objName == metadata.sobjects[j].name){
                                    metadata.sobjects[j].sync = true;
                                    j = metadata.sobjects.length; //break the loop
                                }
                            }
                        }
                        return metadata.sobjects;
                    },
                    isObjecInSync: function(name){
                        return checkIfObjectExistsAtConfig(name);
                    }
                };
                });

   
        </script>
    </head>
    <body>
        <div class="navbar navbar-inverse navbar-fixed-top" role="navigation">
            <div class="container-fluid">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target=".navbar-collapse">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand" href="#">MeexleSync Configuration Builder</a>
                </div>
                <div class="navbar-collapse collapse">
                </div>
            </div>
        </div>
        <div class="container-fluid">
            <div class="row">
                <div class="col-sm-3 col-md-2 sidebar" ng-controller="ObjectListCtrl">
                    <form class="navbar-form nav-sidebar">
                        <input type="text" class="form-control" placeholder="Search..." ng-model="query" />
                        <button type="button" class="btn btn-default" ng-click="saveConfig()">Save</button>
                    </form>
                    <ul class="nav nav-sidebar">
                        
                    <li ng-show="getConfigError"><div id="error-wrapper" style="color:red">Meexe Service offline,sync error.</div></li>
                        <li ng-show="saveError"><div id="error-wrapper" style="color:red">Saving config error</div></li>
                        <li ng-show="syncSaved"><div id="error-wrapper" style="color:blue">Settings was saved</div></li>
                        <li ng-show="loading_sidebar"><a href="#"><i class="fa fa-circle-o-notch fa-spin"></i> Loading...</a></li>
                        <li ng-repeat="object in objects | filter:filterSupportedRecordsFn | filter:query">
                            <div id="object-wrapper">
                                <input type='checkbox' ng-change='objectSyncChanged(object)' ng-model="object.sync"/>
                                <a ui-sref='object({ name: object.name })'>{{ object.label }}</a>
                            </div>
                        </li>
                    </ul>
                </div>
                <div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main" ui-view="body">
                </div>
            </div>
        </div>
    </body>
</html>
</apex:page>